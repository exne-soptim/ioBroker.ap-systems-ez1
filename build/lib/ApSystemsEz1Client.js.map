{
  "version": 3,
  "sources": ["../../src/lib/ApSystemsEz1Client.ts"],
  "sourcesContent": ["import axios, { AxiosResponse } from \"axios\";\r\nimport { ReturnAlarmInfo } from \"./ReturnAlarmInfo\";\r\nimport { ReturnDeviceInfo } from \"./ReturnDeviceInfo\";\r\nimport { ReturnOutputData } from \"./ReturnOutputData\";\r\nimport { TypedReturnDto } from \"./TypedReturnDto\";\r\nimport { ReturnOnOffStatus } from \"./ReturnOnOffStatus\";\r\nimport { ReturnMaxPower } from \"./ReturnMaxPower\";\r\n\r\nexport class ApSystemsEz1Client {\r\n\tprivate baseUrl: string | undefined;\r\n\tprivate log!: ioBroker.Logger;\r\n\r\n\tconstructor(logger : ioBroker.Logger, ipAddress: string, port: number) {\r\n\t\tthis.log = logger;\r\n\t\tthis.baseUrl = `http://${ipAddress}:${port}`;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A private method to send HTTP requests to the specified endpoint of the microinverter.\r\n\t * This method is used internally by other class methods to perform GET requests.\r\n\t * @param endpoint - The API endpoint to make the request to.\r\n\t * @returns The JSON response from the microinverter as a dictionary.\r\n\t * Prints an error message if the HTTP request fails for any reason.\r\n \t */\r\n\tprivate async getRequest<TResult>(endpoint: string): Promise<TResult | undefined> {\r\n\t\ttry {\r\n\t\t\tconst url: string = `${this.baseUrl}/${endpoint}`;\r\n\t\t\tthis.log.info(`url: ${url}`)\r\n\r\n\t\t\tconst response: AxiosResponse = await axios.get(url);\r\n\r\n\t\t\t// Handle the response data\r\n\t\t\tthis.log.info(`Response: ${JSON.stringify(response.data)}`);\r\n\t\t\tif (response.status !== 200) {\r\n\t\t\t\tthis.handleClientError(response.statusText);\r\n\t\t\t} else {\r\n\t\t\t\tconst result: TResult = response.data as TResult;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// Handle any errors that occurred during the request\r\n\t\t\tawait this.handleClientError(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves detailed information about the device. This method sends a request to the\r\n\t * \"getDeviceInfo\" endpoint and returns a dictionary containing various details about the device.\r\n\t * @returns The returned data includes the device ID, device version, the SSID it is connected to, its IP\r\n\t *  address, and its minimum and maximum power settings. This information can be used for monitoring\r\n\t *  and configuring the device.\r\n\t */\r\n\tpublic async getDeviceInfo(): Promise<TypedReturnDto<ReturnDeviceInfo> | undefined> {\r\n\t\tconst result: TypedReturnDto<ReturnDeviceInfo> | undefined = await this.getRequest<TypedReturnDto<ReturnDeviceInfo>>(\"getDeviceInfo\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the alarm status information for various components of the device. This method\r\n\t * makes a request to the \"getAlarm\" endpoint and returns a dictionary containing the alarm\r\n\t * status for different parameters.\r\n\t *\r\n\t * @returns The 'data' field in the returned dictionary includes the status of several components,\r\n\t * each represented as a string indicating whether there is an alarm ('1') or normal operation ('0').\r\n\t */\r\n\tpublic async getAlarmInfo(): Promise<TypedReturnDto<ReturnAlarmInfo> | undefined> {\r\n\t\tconst result: TypedReturnDto<ReturnAlarmInfo> | undefined = await this.getRequest<TypedReturnDto<ReturnAlarmInfo>>(\"getAlarm\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the On/Off of EZ1 device.\r\n\t *\r\n\t * @returns The 'data' field in the returned dictionary includes the status of the device.\r\n\t * \"0\" means on, \"1\" means off.\r\n\t */\r\n\tpublic async getOnOffStatus(): Promise<TypedReturnDto<ReturnOnOffStatus> | undefined> {\r\n\t\tconst result: TypedReturnDto<ReturnOnOffStatus> | undefined = await this.getRequest<TypedReturnDto<ReturnOnOffStatus>>(\"getOnOff\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Retrieves the current output data for the device. This method\r\n\t * makes a request to the \"getOutputData\" endpoint to fetch the device's output data.\r\n\t *\r\n\t * @returns The returned data includes various parameters such as power output status ('p1', 'p2'),\r\n\t * energy readings ('e1', 'e2'), and total energy ('te1', 'te2') for two different inputs\r\n\t * of the inverter. Additionally, it provides a status message and the device ID.\r\n\t */\r\n\tpublic async getOutputData(): Promise<TypedReturnDto<ReturnOutputData> | undefined> {\r\n\t\tconst result: TypedReturnDto<ReturnOutputData> | undefined = await this.getRequest<TypedReturnDto<ReturnOutputData>>(\"getOutputData\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves and calculates the combined power output status of inverter inputs 1 and 2.\r\n\t * This method first calls getOutputData() to fetch the output data from the device, which\r\n\t * includes individual power output values for 'p1' and 'p2'. It then sums these values to\r\n\t * provide the total combined power output.\r\n\t * @returns The total sum of power output values 'p1' and 'p2' as a number.\r\n\t */\r\n\tpublic async getTotalOutput(): Promise<number | undefined> {\r\n\t\tconst outputData: TypedReturnDto<ReturnOutputData> | undefined = await this.getOutputData();\r\n\t\tif (outputData?.data) {\r\n\t\t\treturn outputData.data.p1 + outputData.data.p2;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves and calculates the total energy generated today by both inverter inputs, 1 and 2.\r\n\t * This method first calls getOutputData() to fetch the output data from the device, which\r\n\t * includes individual energy readings for 'e1' and 'e2', each representing the energy in\r\n\t * kilowatt-hours (kWh) generated by the respective inverter inputs.\r\n\t * @returns The total sum of power output values 'e1' and 'e2' as a number.\r\n\t */\r\n\tpublic async getTotalEnergyToday(): Promise<number | undefined> {\r\n\t\tconst outputData: TypedReturnDto<ReturnOutputData> | undefined = await this.getOutputData();\r\n\t\tif (outputData?.data) {\r\n\t\t\treturn outputData.data.e1 + outputData.data.e2;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves and calculates the total lifetime energy generated by both inverter inputs 1 and 2.\r\n\t * This method first calls getOutputData() to fetch the output data from the device, which\r\n\t * includes individual lifetime energy readings for 'te1' and 'te2'. Each of these values\r\n\t * represents the total lifetime energy generated by the respective inverter inputs, reported\r\n\t * in kilowatt-hours (kWh).\r\n\t * @returns The total sum of power output values 'te1' and 'te2' as a number.\r\n\t */\r\n\tpublic async getTotalEnergyLifetime(): Promise<number | undefined> {\r\n\t\tconst outputData: TypedReturnDto<ReturnOutputData> | undefined = await this.getOutputData();\r\n\t\tif (outputData?.data) {\r\n\t\t\treturn outputData.data.te1 + outputData.data.te2;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the set maximum power setting of the device. This method makes a request to the\r\n\t * \"getMaxPower\" endpoint and returns a dictionary containing the maximum power limit of the device set by the user.\r\n\t * @returns Max output power in watts\r\n\t */\r\n\tpublic async getMaxPower(): Promise<TypedReturnDto<ReturnMaxPower> | undefined> {\r\n\t\tconst result: TypedReturnDto<ReturnMaxPower> | undefined = await this.getRequest<TypedReturnDto<ReturnMaxPower>>(\"getMaxPower\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate async handleClientError(error: unknown): Promise<void> {\r\n\t    if (error instanceof Error) {\r\n\t\t\tthis.log.error(`Unknown error: ${error}. Stack: ${error.stack}`)\r\n\t\t} else {\r\n\t\t\tthis.log.error(`Unknown error: ${error}`)\r\n\t\t}\r\n\t}\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAQ9B,MAAM,mBAAmB;AAAA,EAI/B,YAAY,QAA0B,WAAmB,MAAc;AACtE,SAAK,MAAM;AACX,SAAK,UAAU,UAAU,aAAa;AAAA,EACvC;AAAA,EAUA,MAAc,WAAoB,UAAgD;AACjF,QAAI;AACH,YAAM,MAAc,GAAG,KAAK,WAAW;AACvC,WAAK,IAAI,KAAK,QAAQ,KAAK;AAE3B,YAAM,WAA0B,MAAM,aAAAA,QAAM,IAAI,GAAG;AAGnD,WAAK,IAAI,KAAK,aAAa,KAAK,UAAU,SAAS,IAAI,GAAG;AAC1D,UAAI,SAAS,WAAW,KAAK;AAC5B,aAAK,kBAAkB,SAAS,UAAU;AAAA,MAC3C,OAAO;AACN,cAAM,SAAkB,SAAS;AACjC,eAAO;AAAA,MACR;AAAA,IACD,SAAS,OAAP;AAED,YAAM,KAAK,kBAAkB,KAAK;AAAA,IACnC;AAAA,EACD;AAAA,EASA,MAAa,gBAAuE;AACnF,UAAM,SAAuD,MAAM,KAAK,WAA6C,eAAe;AACpI,WAAO;AAAA,EACR;AAAA,EAUA,MAAa,eAAqE;AACjF,UAAM,SAAsD,MAAM,KAAK,WAA4C,UAAU;AAC7H,WAAO;AAAA,EACR;AAAA,EAQA,MAAa,iBAAyE;AACrF,UAAM,SAAwD,MAAM,KAAK,WAA8C,UAAU;AACjI,WAAO;AAAA,EACR;AAAA,EAWA,MAAa,gBAAuE;AACnF,UAAM,SAAuD,MAAM,KAAK,WAA6C,eAAe;AACpI,WAAO;AAAA,EACR;AAAA,EASA,MAAa,iBAA8C;AAC1D,UAAM,aAA2D,MAAM,KAAK,cAAc;AAC1F,QAAI,yCAAY,MAAM;AACrB,aAAO,WAAW,KAAK,KAAK,WAAW,KAAK;AAAA,IAC7C;AACA,WAAO;AAAA,EACR;AAAA,EASA,MAAa,sBAAmD;AAC/D,UAAM,aAA2D,MAAM,KAAK,cAAc;AAC1F,QAAI,yCAAY,MAAM;AACrB,aAAO,WAAW,KAAK,KAAK,WAAW,KAAK;AAAA,IAC7C;AACA,WAAO;AAAA,EACR;AAAA,EAUA,MAAa,yBAAsD;AAClE,UAAM,aAA2D,MAAM,KAAK,cAAc;AAC1F,QAAI,yCAAY,MAAM;AACrB,aAAO,WAAW,KAAK,MAAM,WAAW,KAAK;AAAA,IAC9C;AACA,WAAO;AAAA,EACR;AAAA,EAOA,MAAa,cAAmE;AAC/E,UAAM,SAAqD,MAAM,KAAK,WAA2C,aAAa;AAC9H,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,kBAAkB,OAA+B;AAC3D,QAAI,iBAAiB,OAAO;AAC9B,WAAK,IAAI,MAAM,kBAAkB,iBAAiB,MAAM,OAAO;AAAA,IAChE,OAAO;AACN,WAAK,IAAI,MAAM,kBAAkB,OAAO;AAAA,IACzC;AAAA,EACD;AACD;",
  "names": ["axios"]
}
